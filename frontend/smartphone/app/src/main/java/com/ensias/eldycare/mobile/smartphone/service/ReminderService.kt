package com.ensias.eldycare.mobile.smartphone.service

import android.app.Service
import android.content.Context
import android.content.Intent
import android.os.IBinder
import android.util.Log
import com.ensias.eldycare.mobile.smartphone.api.ApiClient
import com.ensias.eldycare.mobile.smartphone.api.websocket.ReminderWebsocketClient
import com.ensias.eldycare.mobile.smartphone.data.Reminder
import com.ensias.eldycare.mobile.smartphone.data.model.ReminderCalendarEventModel
import com.ensias.eldycare.mobile.smartphone.data.model.ReminderModel
import com.ensias.eldycare.mobile.smartphone.service.content_provider.CalendarProvider
import java.time.Instant
import java.time.LocalDate
import java.time.LocalTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter
import java.util.Date

class ReminderService(): Service(){
    override fun onBind(p0: Intent?): IBinder? {
        TODO("Not yet implemented")
    }

    override fun onCreate() {
        super.onCreate()
        Log.d("ReminderService", "ReminderService created")
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.d("ReminderService", "ReminderService destroyed")
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d("ReminderService", "Starting ReminderService...")
        // initialize websocket client
        initializeWebsocketClient()
        return START_STICKY
    }

    private fun initializeWebsocketClient() {
        // get the user email
        val email = ApiClient.email
        val websocketClient = ReminderWebsocketClient(email, this, ::reminderHandler)
        websocketClient.connect()
    }


    private fun reminderHandler(context : Context, reminderModel : ReminderModel) {
        Log.d("ReminderService", "Reminder received : $reminderModel")
        // calculate start date in mil using reminderDate and reminderTime
        val date = reminderModel.reminderDate
        val dateMil = date.atStartOfDay().toInstant(ZoneOffset.UTC).toEpochMilli()
        val time = reminderModel.reminderTime
        val hour = time.hour
        val minute = time.minute
        val second = time.second
        val mil = ((hour)* 3600 + minute * 60 + second) * 1000 // TODO recheck this mess
        Log.d(
            "ReminderService",
            "date : $date, time : $time, hour : $hour, minute : $minute, second : $second, mil : $mil"
        )
        val startDate = dateMil + mil

        // create reminder object for calendar
        val reminder = ReminderCalendarEventModel(
//            id = 0,
            title = "ELDYCARE - " + reminderModel.description,
            description = "Generated by eldycare",
            dtstart = startDate,
            dtend = startDate + 3600000,
            eventLocation = "ELDYCARE",
            calendarId = 1,
            eventTimezone = "GMT"
        )

        // add reminder to calendar
        CalendarProvider(context).writeToCalendar(reminder)

        // recompose reminder list
        recomposeReminderList(context)
    }
    companion object {
        var onReminderListChange: (List<Reminder>) -> Unit = {}
        fun recomposeReminderList(context: Context) {
            val newReminderList = mutableListOf<Reminder>()
            CalendarProvider(context).readFromCalendar().forEach{
                val reminderTime = Instant.ofEpochMilli(it.dtstart).atZone(ZoneOffset.UTC).toLocalTime()
                val reminderDate = Instant.ofEpochMilli(it.dtstart).atZone(ZoneOffset.UTC).toLocalDate()
                val reminderEl = Reminder(
                    reminderTime = reminderTime,
                    reminderDate = reminderDate,
                    description = it.title.subSequence(
                        startIndex = ReminderCalendarEventModel.TITLE_PREFIX.length,
                        endIndex = it.title.length
                    ).toString()
                )
                newReminderList.add(reminderEl)
            }
            Log.d("ReminderService", "newReminderList : $newReminderList")
            onReminderListChange(newReminderList)
        }
    }

}