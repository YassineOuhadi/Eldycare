name: eldycare backend CICD

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths: "backend/**"
  pull_request:
    branches: ["main"]
    paths: "backend/**"

jobs:
  build-microservices:
    name: build-microservices
    runs-on: ubuntu-latest
    steps:
      - name: Github Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: build
        run: mvn -DskipTests clean install
        working-directory: ./backend

      - name: upload Artifacts for api-gateway
        uses: actions/upload-artifact@v4.0.0
        with:
          name: api-gateway-service
          path: ./backend/api-gateway-service

      - name: upload Artifacts for discovery-service
        uses: actions/upload-artifact@v4.0.0
        with:
          name: discovery-service
          path: ./backend/discovery-service

      - name: upload Artifacts for authentication-service
        uses: actions/upload-artifact@v4.0.0
        with:
          name: authentication-service
          path: ./backend/authentication-service
          
  push-to-dockerhub-discovery-service:
    name: push-to-dockerhub-discovery-service
    runs-on: ubuntu-latest
    needs: build-microservices
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: discovery-service
      - name: List contents of the folders
        run: ls -R
      - name: Build & push Docker image discovery-service
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: yassineouhadi/eldycare-discovery-service
          tags: latest
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
    
  push-to-dockerhub-api-gateway-service:
    name: push-to-dockerhub-api-gateway-service
    runs-on: ubuntu-latest
    needs: build-microservices
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-gateway-service
      - name: List contents of the folders
        run: ls -R
      - name: Build & push Docker image api-gateway-service
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: yassineouhadi/eldycare-api-gateway-service
          tags: latest
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
    
  push-to-dockerhub-authentication-service:
    name: push-to-dockerhub-authentication-service
    runs-on: ubuntu-latest
    needs: build-microservices
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: authentication-service
      - name: List contents of the folders
        run: ls -R
      - name: Build & push Docker image authentication-service
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: yassineouhadi/eldycare-authentication-service
          tags: latest
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  create-eks-cluster:
    name: Create EKS Cluster
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Check if EKS cluster exists
        run: |
          eks_cluster_name="eldycare-cluster"
          if aws eks describe-cluster --region us-east-1 --name $eks_cluster_name 2>/dev/null; then
            echo "EKS cluster $eks_cluster_name already exists."
          else
            echo "EKS cluster $eks_cluster_name does not exist. Creating..."
            cd backend/terraform
            terraform init
            terraform apply -auto-approve
          fi

  deploy-discovery-service:
    name: Deploy Discovery Service to EKS
    runs-on: ubuntu-latest
    needs: [create-eks-cluster, push-to-dockerhub-discovery-service]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Configure kubectl for EKS
        run: |
          aws eks --region us-east-1 update-kubeconfig --name eldycare-cluster

      - name: Deploy Discovery Service to EKS
        run: |
          cd backend/discovery-service

          kubectl apply -f discovery-service-deployment.yaml
          kubectl apply -f discovery-service.yaml
    
  deploy-api-gateway-service:
    name: Deploy API Gateway Service to EKS
    runs-on: ubuntu-latest
    needs: [create-eks-cluster, push-to-dockerhub-api-gateway-service]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Configure kubectl for EKS
        run: |
          aws eks --region us-east-1 update-kubeconfig --name eldycare-cluster

      - name: Deploy API Gateway Service to EKS
        run: |
          cd backend/api-gateway-service

          kubectl apply -f api-gateway-service-deployment.yaml
          kubectl apply -f api-gateway-service.yaml

  deploy-authentication-service:
    name: Deploy Authentication Service to EKS
    runs-on: ubuntu-latest
    needs: [create-eks-cluster, push-to-dockerhub-authentication-service]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Configure kubectl for EKS
        run: |
          aws eks --region us-east-1 update-kubeconfig --name eldycare-cluster

      - name: Deploy Authentication Service to EKS
        run: |
          cd backend/authentication-service

          kubectl apply -f authentication-service-deployment.yaml
          kubectl apply -f authentication-service.yaml
  
  # ...

  deploy-mongodb-notification-service:
    name: Deploy MongoDB Notification Service to EKS
    runs-on: ubuntu-latest
    needs: [create-eks-cluster]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Configure kubectl for EKS
        run: |
          aws eks --region us-east-1 update-kubeconfig --name eldycare-cluster

      - name: Deploy MongoDB Notification Service to EKS
        run: |
          cd backend/mongodb-notification

          kubectl apply -f mongodb-notification-deployment.yaml
          kubectl apply -f mongodb-notification-service.yaml

  deploy-mongodb-reminder-service:
    name: Deploy MongoDB Reminder Service to EKS
    runs-on: ubuntu-latest
    needs: [create-eks-cluster]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Configure kubectl for EKS
        run: |
          aws eks --region us-east-1 update-kubeconfig --name eldycare-cluster

      - name: Deploy MongoDB Reminder Service to EKS
        run: |
          cd backend/mongodb-reminder

          kubectl apply -f mongodb-reminder-deployment.yaml
          kubectl apply -f mongodb-reminder-service.yaml
          
  deploy-neo4j-service:
    name: Deploy Neo4j Service to EKS
    runs-on: ubuntu-latest
    needs: [create-eks-cluster]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Configure kubectl for EKS
        run: |
          aws eks --region us-east-1 update-kubeconfig --name eldycare-cluster

      - name: Deploy Neo4j Service to EKS
        run: |
          cd backend/neo4j

          kubectl apply -f neo4j-deployment.yaml
          kubectl apply -f neo4j-service.yaml

  deploy-rabbitmq-service:
    name: Deploy RabbitMQ Service to EKS
    runs-on: ubuntu-latest
    needs: [create-eks-cluster]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Configure kubectl for EKS
        run: |
          aws eks --region us-east-1 update-kubeconfig --name eldycare-cluster

      - name: Deploy RabbitMQ Service to EKS
        run: |
          cd backend/rabbitmq

          kubectl apply -f rabbitmq-deployment.yaml
          kubectl apply -f rabbitmq-service.yaml